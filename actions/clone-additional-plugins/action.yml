name: Install Additional Plugins
description: Installs any additional plugins listed in this plugin/theme's `about.json` (under `.tests.requiredPlugins`)

inputs:
  ssh_private_key:
    description: "Optional SSH private key, if one or more of the repos is private"
    required: false
  about_json_path:
    description: Path to the about.json file
    required: true

runs:
  using: "composite"

  steps:
    - name: Start ssh agent
      if: inputs.ssh_private_key != ''
      shell: bash
      run: |
        eval "$(ssh-agent)";
        echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
        echo "SSHAGENT_PID=$SSHAGENT_PID" >> $GITHUB_ENV

    - name: Install required plugins
      env:
        KEYS: ${{ inputs.ssh_private_key }}
        GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
      run: |
        require "json"
        require "open3"

        metadata_filename = "${{ inputs.about_json_path }}"

        if !File.exist?(metadata_filename)
          puts "No about.json found"
          exit 0
        end

        parsed = JSON.parse(File.read(metadata_filename))

        plugins = parsed.dig("tests", "requiredPlugins")
        if plugins.nil?
          puts "No plugins found"
          exit 0
        end

        def try_each_key
          keys = ENV["KEYS"]
          return yield if keys.nil? || keys.length == 0

          keys = keys.split("|").filter {|k| k.length > 0 }
          return yield if keys.length == 0

          keys.each_with_index do |key, index|
            system("ssh-add -D -q", exception: true)

            out, status = Open3.capture2e("ssh-add", "-", stdin_data: "#{key.strip}\n")
            raise "Error adding key\n#{out}" unless status.success?

            return yield
          rescue => e
            if index < keys.length - 1
              puts "Trying next key..."
            else
              raise e
            end
          end
        end

        plugins.each do |plugin|
          plugin_url, branch = nil
          if plugin.kind_of?(Hash)
            plugin_url = plugin["url"]
            branch = plugin["branch"]
          else
            plugin_url = plugin
          end

          puts "Cloning #{plugin_url}..."
          try_each_key do
            args = ["-C", "plugins", "clone", "--depth", "1"]
            args << "-b" << branch if branch
            args << plugin_url

            out, status = Open3.capture2e("git", *args)
            raise "Clone error \n#{out}" unless status.success?

            puts "Successfully cloned #{plugin_url}\n"
          end

          puts "Ensuring compatible version for #{plugin_url}..."
          system "bin/rake", "plugin:pull_compatible[#{File.basename(plugin_url)}]", exception: true
        end

        puts "Done cloning required plugins"
      shell: ruby {0}
